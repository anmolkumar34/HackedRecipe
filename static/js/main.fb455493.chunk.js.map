{"version":3,"sources":["Description.js","Card.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Description","match","useEffect","a","fetch","res","json","jres","setItem","fetchdata","useState","item","details","find","id","params","console","log","label","className","src","image","alt","name","price","category","description","action","for","type","placeholder","value","Card","props","cardDetails","to","style","textDecoration","Home","state","isLoaded","menuItems","search","then","data","setState","event","this","target","substr","filter","toLowerCase","indexOf","map","key","onChange","updateSearch","bind","Component","App","basename","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb455493.chunk.js","sourcesContent":["import React,{useState, useEffect} from \"react\"\r\nimport { AiFillStar } from \"react-icons/ai\";\r\n\r\nfunction Description({match}){\r\n    useEffect(()=>{\r\n        const fetchdata = async () =>{\r\n        const res = await fetch('http://starlord.hackerearth.com/recipe')\r\n        const jres = await res.json()\r\n        setItem(jres)\r\n        }\r\n        fetchdata()\r\n    },[])\r\n    \r\n    const [item,setItem]=useState([])\r\n\r\n    let details =item.find((item)=>{\r\n        return item.id == match.params.id\r\n    })\r\n\r\n    console.log(details)\r\n\r\n    if(details)\r\n    {\r\n        let label = details.label ? details.label : null\r\n        return(\r\n            <div className=\"describe\">\r\n                <img src={details.image} alt={details.name}/>\r\n                <div className=\"nameStar\">\r\n                    <h1>{details.name}</h1>\r\n                    <AiFillStar/><AiFillStar/><AiFillStar/><AiFillStar/>\r\n                    <h3>Price : {details.price}$</h3>\r\n                    <h3>{label} {details.category}</h3>\r\n                    <h3>Description</h3>\r\n                    <h4>{details.description}</h4>\r\n                    <div className=\"mainCircle\">\r\n                       <div className=\"circle first\">\r\n                        <span>8</span><br/>Ingredients\r\n                        </div>\r\n                        <div className=\"circle second\">\r\n                            <span>220</span><br/>Calories\r\n                        </div>\r\n                        <div className=\"circle third\">\r\n                            <span>25</span><br/>Minutes\r\n                        </div> \r\n                    </div>  \r\n                    <hr></hr>\r\n                    <form action=\"#\">\r\n                        <label for=\"name\">ADD COMMENT</label>\r\n                        <input type=\"text\" id=\"comment\" name=\"comment\" placeholder=\"Type something here...\"/>\r\n                        <input type=\"submit\" id=\"addComment\" value=\"ADD COMMENT\"/>\r\n                    </form>\r\n                </div>\r\n                <div className=\"Extra\">\r\n                    <h3>Ingredients</h3>\r\n                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam feugiat\r\n                        diam dolor, non vehicula massa egestas vel. Fusce malesuada, metus \r\n                        nec posuere feugiat, lorem lorem egestas sapien, a varius ligula tortor\r\n                        vitae ipsum. Fusce placerat est ac ipsum condimentum, sed iaculis dolor\r\n                        elementum. </p>\r\n                </div>\r\n            </div>        \r\n        )\r\n    }\r\n    else{\r\n        return null;\r\n    }    \r\n}\r\n\r\nexport default Description","import React,{ useState } from \"react\"\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Card(props){   \r\n    const [modalIsOpen, setModalIsOpen] = useState(false) \r\n    return (\r\n        <div className=\"masonryblocks\">\r\n            <h3 className=\"category\">{props.cardDetails.category}</h3>\r\n            <img src={props.cardDetails.image} alt={props.cardDetails.name}/>\r\n            <p>{props.cardDetails.name}</p> \r\n            <div className=\"Overlay\"></div>\r\n            <div className=\"OverlayHover\">\r\n                <Link to={`/${props.cardDetails.id}`} style={{textDecoration:\"none\"}} >\r\n                    <a className=\"Desc one\">VIEW MORE</a> \r\n                </Link>   \r\n            </div>                                \r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default Card","import React,{Component} from 'react'\r\nimport Card from \"./Card\"\r\n\r\nclass Home extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n          isLoaded : false,\r\n          menuItems : [],\r\n          search: ''\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        fetch('http://starlord.hackerearth.com/recipe').then(res => res.json()).then(data => { \r\n          this.setState({\r\n            isLoaded :true,\r\n            menuItems : data\r\n          })\r\n        })\r\n    }\r\n\r\n    updateSearch(event){\r\n      this.setState({search : event.target.value.substr(0,30)})\r\n    }\r\n\r\n    render(){\r\n        var {isLoaded , menuItems} = this.state;\r\n        if(!isLoaded){\r\n            return <div>Loading...</div>\r\n          }\r\n          else{\r\n            let searchItem = menuItems.filter(\r\n              item => {\r\n                return item.name.toLowerCase().indexOf(this.state.search) !== -1\r\n              }\r\n            )      \r\n            let item = searchItem.map(item => \r\n                <Card key={item.id} cardDetails={item} />\r\n              );\r\n            return (\r\n                <div>\r\n                  <input \r\n                  type=\"text\" \r\n                  value={this.state.search} \r\n                  onChange={this.updateSearch.bind(this)}\r\n                  placeholder=\"What's Cooking...\"/>\r\n                  <div className=\"masonryholder\">            \r\n                    {item}          \r\n                  </div>\r\n                </div>                \r\n            )\r\n          }\r\n    }\r\n}\r\n\r\nexport default Home","import React,{Component} from 'react';\nimport './App.css';\nimport {HashRouter, Switch, Route} from 'react-router-dom'\nimport Description from \"./Description\"\nimport Home from \"./Home\"\n\nclass App extends Component {\n    render(){\n    return(\n      <HashRouter basename='/'>\n        <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/:id\" exact component={Description}/>\n        </Switch>\n      </HashRouter>      \n    )   \n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}